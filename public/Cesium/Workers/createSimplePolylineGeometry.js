define(["./when-207a1520","./Rectangle-49e286b5","./ArcType-198c1070","./buildModuleUrl-c881a5f0","./Cartographic-dafe811b","./Color-03dac52c","./ComponentDatatype-662c7548","./Check-07c613bc","./GeometryAttribute-9a541822","./GeometryAttributes-d4cebc09","./IndexDatatype-447558fc","./Math-bae672f2","./PolylinePipeline-7fefa20c","./PrimitiveType-44685a19","./Intersect-4d67bbf5","./Event-2ef149d9","./RuntimeError-b98f87df","./FeatureDetection-fc084259","./WebGLConstants-8d1e45f7","./Cartesian2-4a5e3b0e","./Cartesian4-58d59766","./EllipsoidGeodesic-a38ba139","./EllipsoidRhumbLine-b1de3107","./IntersectionTests-37198421","./Plane-e266b3a4"],(function(e,t,r,o,a,n,i,l,s,c,p,f,u,y,h,d,g,m,T,v,b,_,w,B,k){"use strict";function E(e,t,r,o,a,i,l){var s,c=u.m.numberOfPoints(e,t,a),p=r.red,f=r.green,y=r.blue,h=r.alpha,d=o.red,g=o.green,m=o.blue,T=o.alpha;if(n.e.equals(r,o)){for(s=0;s<c;s++)i[l++]=n.e.floatToByte(p),i[l++]=n.e.floatToByte(f),i[l++]=n.e.floatToByte(y),i[l++]=n.e.floatToByte(h);return l}var v=(d-p)/c,b=(g-f)/c,_=(m-y)/c,w=(T-h)/c,B=l;for(s=0;s<c;s++)i[B++]=n.e.floatToByte(p+s*v),i[B++]=n.e.floatToByte(f+s*b),i[B++]=n.e.floatToByte(y+s*_),i[B++]=n.e.floatToByte(h+s*w);return B}function L(o){var i=(o=e.u(o,e.u.EMPTY_OBJECT)).positions,s=o.colors,c=e.u(o.colorsPerVertex,!1);if(!e.e(i)||i.length<2)throw new l.t("At least two positions are required.");if(e.e(s)&&(c&&s.length<i.length||!c&&s.length<i.length-1))throw new l.t("colors has an invalid length.");this._positions=i,this._colors=s,this._colorsPerVertex=c,this._arcType=e.u(o.arcType,r.L.GEODESIC),this._granularity=e.u(o.granularity,f.e.RADIANS_PER_DEGREE),this._ellipsoid=e.u(o.ellipsoid,t.t.WGS84),this._workerName="createSimplePolylineGeometry";var p=1+i.length*a.t.packedLength;p+=e.e(s)?1+s.length*n.e.packedLength:1,this.packedLength=p+t.t.packedLength+3}L.pack=function(r,o,i){if(!e.e(r))throw new l.t("value is required");if(!e.e(o))throw new l.t("array is required");i=e.u(i,0);var s,c=r._positions,p=c.length;for(o[i++]=p,s=0;s<p;++s,i+=a.t.packedLength)a.t.pack(c[s],o,i);var f=r._colors;for(p=e.e(f)?f.length:0,o[i++]=p,s=0;s<p;++s,i+=n.e.packedLength)n.e.pack(f[s],o,i);return t.t.pack(r._ellipsoid,o,i),i+=t.t.packedLength,o[i++]=r._colorsPerVertex?1:0,o[i++]=r._arcType,o[i]=r._granularity,o},L.unpack=function(r,o,i){if(!e.e(r))throw new l.t("array is required");o=e.u(o,0);var s,c=r[o++],p=new Array(c);for(s=0;s<c;++s,o+=a.t.packedLength)p[s]=a.t.unpack(r,o);var f=(c=r[o++])>0?new Array(c):void 0;for(s=0;s<c;++s,o+=n.e.packedLength)f[s]=n.e.unpack(r,o);var u=t.t.unpack(r,o);o+=t.t.packedLength;var y=1===r[o++],h=r[o++],d=r[o];return e.e(i)?(i._positions=p,i._colors=f,i._ellipsoid=u,i._colorsPerVertex=y,i._arcType=h,i._granularity=d,i):new L({positions:p,colors:f,ellipsoid:u,colorsPerVertex:y,arcType:h,granularity:d})};var A=new Array(2),P=new Array(2),D={positions:A,height:P,ellipsoid:void 0,minDistance:void 0,granularity:void 0};return L.createGeometry=function(t){var l,h,d,g,m,T=t._positions,v=t._colors,b=t._colorsPerVertex,_=t._arcType,w=t._granularity,B=t._ellipsoid,k=f.e.chordLength(w,B.maximumRadius),L=e.e(v)&&!b,C=T.length,G=0;if(_===r.L.GEODESIC||_===r.L.RHUMB){var x,I,R;_===r.L.GEODESIC?(x=f.e.chordLength(w,B.maximumRadius),I=u.m.numberOfPoints,R=u.m.generateArc):(x=w,I=u.m.numberOfPointsRhumbLine,R=u.m.generateRhumbArc);var S=u.m.extractHeights(T,B),O=D;if(_===r.L.GEODESIC?O.minDistance=k:O.granularity=w,O.ellipsoid=B,L){var U=0;for(l=0;l<C-1;l++)U+=I(T[l],T[l+1],x)+1;h=new Float64Array(3*U),g=new Uint8Array(4*U),O.positions=A,O.height=P;var V=0;for(l=0;l<C-1;++l){A[0]=T[l],A[1]=T[l+1],P[0]=S[l],P[1]=S[l+1];var q=R(O);if(e.e(v)){var N=q.length/3;m=v[l];for(var F=0;F<N;++F)g[V++]=n.e.floatToByte(m.red),g[V++]=n.e.floatToByte(m.green),g[V++]=n.e.floatToByte(m.blue),g[V++]=n.e.floatToByte(m.alpha)}h.set(q,G),G+=q.length}}else if(O.positions=T,O.height=S,h=new Float64Array(R(O)),e.e(v)){for(g=new Uint8Array(h.length/3*4),l=0;l<C-1;++l){G=E(T[l],T[l+1],v[l],v[l+1],k,g,G)}var M=v[C-1];g[G++]=n.e.floatToByte(M.red),g[G++]=n.e.floatToByte(M.green),g[G++]=n.e.floatToByte(M.blue),g[G++]=n.e.floatToByte(M.alpha)}}else{d=L?2*C-2:C,h=new Float64Array(3*d),g=e.e(v)?new Uint8Array(4*d):void 0;var H=0,W=0;for(l=0;l<C;++l){var Y=T[l];if(L&&l>0&&(a.t.pack(Y,h,H),H+=3,m=v[l-1],g[W++]=n.e.floatToByte(m.red),g[W++]=n.e.floatToByte(m.green),g[W++]=n.e.floatToByte(m.blue),g[W++]=n.e.floatToByte(m.alpha)),L&&l===C-1)break;a.t.pack(Y,h,H),H+=3,e.e(v)&&(m=v[l],g[W++]=n.e.floatToByte(m.red),g[W++]=n.e.floatToByte(m.green),g[W++]=n.e.floatToByte(m.blue),g[W++]=n.e.floatToByte(m.alpha))}}var z=new c.a;z.position=new s.o({componentDatatype:i.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:h}),e.e(v)&&(z.color=new s.o({componentDatatype:i.ComponentDatatype.UNSIGNED_BYTE,componentsPerAttribute:4,values:g,normalize:!0}));var J=2*((d=h.length/3)-1),j=p.IndexDatatype.createTypedArray(d,J),K=0;for(l=0;l<d-1;++l)j[K++]=l,j[K++]=l+1;return new s.I({attributes:z,indices:j,primitiveType:y._0x102869.LINES,boundingSphere:o.i.fromPoints(T)})},function(r,o){return e.e(o)&&(r=L.unpack(r,o)),r._ellipsoid=t.t.clone(r._ellipsoid),L.createGeometry(r)}}));
