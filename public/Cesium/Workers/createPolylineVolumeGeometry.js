define(["./when-207a1520","./Rectangle-49e286b5","./arrayRemoveDuplicates-053c1528","./BoundingRectangle-beed7718","./buildModuleUrl-c881a5f0","./Cartesian2-4a5e3b0e","./Cartographic-dafe811b","./ComponentDatatype-662c7548","./PolylineVolumeGeometryLibrary-98db371f","./Check-07c613bc","./GeometryAttribute-9a541822","./GeometryAttributes-d4cebc09","./GeometryPipeline-35f216f8","./IndexDatatype-447558fc","./Math-bae672f2","./PolygonPipeline-63f52c70","./PrimitiveType-44685a19","./VertexFormat-ac4b93af","./WindingOrder-380ced54","./Intersect-4d67bbf5","./Event-2ef149d9","./RuntimeError-b98f87df","./WebGLConstants-8d1e45f7","./Cartesian4-58d59766","./EllipsoidTangentPlane-fb04e18c","./IntersectionTests-37198421","./Plane-e266b3a4","./PolylinePipeline-7fefa20c","./EllipsoidGeodesic-a38ba139","./EllipsoidRhumbLine-b1de3107","./FeatureDetection-fc084259","./AttributeCompression-f9972ce8","./EncodedCartesian3-3f2a160d"],(function(e,t,n,o,i,r,a,s,p,c,l,u,d,h,y,g,f,m,v,b,k,_,P,L,w,C,E,A,D,T,F,R,G){"use strict";function x(n){var o=(n=e.u(n,e.u.EMPTY_OBJECT)).polylinePositions,i=n.shapePositions;if(!e.e(o))throw new c.t("options.polylinePositions is required.");if(!e.e(i))throw new c.t("options.shapePositions is required.");this._positions=o,this._shape=i,this._ellipsoid=t.t.clone(e.u(n.ellipsoid,t.t.WGS84)),this._cornerType=e.u(n.cornerType,p.S.ROUNDED),this._vertexFormat=m.n.clone(e.u(n.vertexFormat,m.n.DEFAULT)),this._granularity=e.u(n.granularity,y.e.RADIANS_PER_DEGREE),this._workerName="createPolylineVolumeGeometry",this.enuCenter=e.u(n.enuCenter,a.t.ZERO);var s=1+o.length*a.t.packedLength;s+=1+i.length*r.o.packedLength+a.t.packedLength,this.packedLength=s+t.t.packedLength+m.n.packedLength+2}x.pack=function(n,o,i){if(!e.e(n))throw new c.t("value is required");if(!e.e(o))throw new c.t("array is required");i=e.u(i,0);var s,p=n._positions,l=p.length;for(o[i++]=l,s=0;s<l;++s,i+=a.t.packedLength)a.t.pack(p[s],o,i);var u=n._shape;for(l=u.length,o[i++]=l,s=0;s<l;++s,i+=r.o.packedLength)r.o.pack(u[s],o,i);return t.t.pack(n._ellipsoid,o,i),i+=t.t.packedLength,m.n.pack(n._vertexFormat,o,i),i+=m.n.packedLength,o[i++]=n._cornerType,o[i++]=n._granularity,a.t.pack(n.enuCenter,o,i),o};var O=t.t.clone(t.t.UNIT_SPHERE),I=new m.n,S={polylinePositions:void 0,shapePositions:void 0,ellipsoid:O,vertexFormat:I,cornerType:void 0,granularity:void 0,enuCenter:void 0};x.unpack=function(n,o,i){if(!e.e(n))throw new c.t("array is required");o=e.u(o,0);var s,p=n[o++],l=new Array(p);for(s=0;s<p;++s,o+=a.t.packedLength)l[s]=a.t.unpack(n,o);p=n[o++];var u=new Array(p);for(s=0;s<p;++s,o+=r.o.packedLength)u[s]=r.o.unpack(n,o);var d=t.t.unpack(n,o,O);o+=t.t.packedLength;var h=m.n.unpack(n,o,I);o+=m.n.packedLength;var y,g=n[o++],f=n[o++];return y=a.t.unpack(n,o),e.e(i)?(i._positions=l,i._shape=u,i._ellipsoid=t.t.clone(d,i._ellipsoid),i._vertexFormat=m.n.clone(h,i._vertexFormat),i._cornerType=g,i._granularity=f,i.enuCenter=y,i):(S.polylinePositions=l,S.shapePositions=u,S.cornerType=g,S.granularity=f,S.enuCenter=y,new x(S))};var q=new o.f;return x.createGeometry=function(t){for(var r=t._positions,c=n.D(r,a.t.equalsEpsilon),y=c.length,m=new Array(y),b=0;b<y;b++)m[b]=a.t.clone(c[b]);var k=t._shape;if(k=p.J.removeDuplicatesFromShape(k),!(c.length<2||k.length<3)){g.A.computeWindingOrder2D(k)===v.W.CLOCKWISE&&k.reverse();var _=o.f.fromPoints(k,q),P={};if(P.combinedPositions=p.J.computePositions(m,k,_,t,!0),!a.t.equals(t.enuCenter,a.t.ZERO)){var L=new Array(y);for(b=0;b<y;b++)L[b]=a.t.clone(c[b]);P.combinedLocalPositions=p.J.computeLocalPositions(L,k,_,t,!0,t.enuCenter)}return function(t,n,o,r){var a=t.combinedPositions,p=t.combinedLocalPositions,c=new u.a;r.position&&(c.position=new l.o({componentDatatype:s.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:a}));var y,m,v,b,k,_,P=n.length,L=a.length/3,w=(L-2*P)/(2*P),C=g.A.triangulate(n),E=(w-1)*P*6+2*C.length,A=h.IndexDatatype.createTypedArray(L,E),D=2*P,T=0;for(y=0;y<w-1;y++){for(m=0;m<P-1;m++)_=(v=2*m+y*P*2)+D,k=(b=v+1)+D,A[T++]=b,A[T++]=v,A[T++]=k,A[T++]=k,A[T++]=v,A[T++]=_;k=(b=1+(v=2*P-2+y*P*2))+D,_=v+D,A[T++]=b,A[T++]=v,A[T++]=k,A[T++]=k,A[T++]=v,A[T++]=_}if(r.st||r.tangent||r.bitangent){var F,R,G=new Float32Array(2*L),x=1/(w-1),O=1/o.height,I=o.height/2,S=0;for(y=0;y<w;y++){for(F=y*x,R=O*(n[0].y+I),G[S++]=F,G[S++]=R,m=1;m<P;m++)R=O*(n[m].y+I),G[S++]=F,G[S++]=R,G[S++]=F,G[S++]=R;R=O*(n[0].y+I),G[S++]=F,G[S++]=R}for(m=0;m<P;m++)F=0,R=O*(n[m].y+I),G[S++]=F,G[S++]=R;for(m=0;m<P;m++)F=(w-1)*x,R=O*(n[m].y+I),G[S++]=F,G[S++]=R;c.st=new l.o({componentDatatype:s.ComponentDatatype.FLOAT,componentsPerAttribute:2,values:new Float32Array(G)})}var q=L-2*P;for(y=0;y<C.length;y+=3){var N=C[y]+q,U=C[y+1]+q,W=C[y+2]+q;A[T++]=N,A[T++]=U,A[T++]=W,A[T++]=W+P,A[T++]=U+P,A[T++]=N+P}var B=new l.I({attributes:c,indices:A,boundingSphere:i.i.fromVertices(a),primitiveType:f._0x102869.TRIANGLES});if(r.normal&&(B=d.k.computeNormal(B)),r.tangent||r.bitangent){try{B=d.k.computeTangentAndBitangent(B)}catch{i.e("polyline-volume-tangent-bitangent","Unable to compute tangents and bitangents for polyline volume geometry")}r.tangent||(B.attributes.tangent=void 0),r.bitangent||(B.attributes.bitangent=void 0),r.st||(B.attributes.st=void 0)}return e.e(p)&&(B.attributes.position.values=p,B.attributes.position.componentDatatype=s.ComponentDatatype.FLOAT),B}(P,k,_,t._vertexFormat)}},function(n,o){return e.e(o)&&(n=x.unpack(n,o)),n._ellipsoid=t.t.clone(n._ellipsoid),x.createGeometry(n)}}));
